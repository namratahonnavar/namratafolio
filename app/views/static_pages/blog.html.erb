<%= render 'shared/header' %>
<article class="article">
  
	<h1><u>Javascript: Roll a Die using object oriented javascript</u></h1>
	<time><span class='month'>June</span> <span class='day'>18</span> <span class='year'>2014</span></time>
	<p class="transbox"><strong><span class="more">I wrote this blog to show how you can convert procedural javascript into an object oriented javascript. I will first show how a procedural js code looks like<br>aap.js looks liek this:<img alt="code procedural" src=
	'polaroids/images/code_before.png'><br>And I now refactor the code so that there is as little as possible in the global scope. I tried to provide good names for all anonymous functions.Each callback or event handler is only 1 or 2 lines and there is clear separation of concerns.Using the object literal, I changed the same code to:<br><img alt="refactored code" src=
	'polaroids/images/after_js.png'><br>however, I did not alter the app.html file, for the purpose of this blog:<img alt="code procedural" src=
	'polaroids/images/app-html.png'></strong></p>

</article>

<article class="article">

<h1><u>Jquery is not magic</u></h1>
	<time datetime="2014-06-14T22:13:00-08:00" pubdate><span class='month'>June</span> <span class='day'>14</span> <span class='year'>2014</span></time>
	<p class="transbox"><strong><span class="more">jQuery is a cross-platform JavaScript library designed to simplify the client-side scripting of HTML. It is a very popular javscript toolbelt. It is a collection of tools, each tool allows you to do a very specific job, for example:<br>1.Select elements with css:<br> -- $('#id'), $('.class'), $('element') --<br>
	2.Manipulate the DOM:<br> -- show(), .hide(), .addClass(), .removeClass() --<br>
	3.Dispatch and listen for events:<br> -- trigger(...), .on(...) --<br>
	4.Send http requests:<br> -- $.ajax --<br>It's important to realize that jQuery is not just one thing, it's a collection of things grouped under one framework. In fact, some parts of it could be used as standalone tools.<br> For example, jQuery uses <a id="sizzle" href="https://github.com/jquery/sizzle">Sizzle</a> under the hood as its selector engine.<br>In this blog I will decompose jquery and reimplement some of it's functionality. <br>The objective of this blog is to remove the "magic" word form jquery and realize there is nothing you couldn't write.<br>I have tried to implement show, hide, addclass and removeclass methods using vanilla javascript.<br><img alt="refactored code" src='polaroids/images/dom.png'> <br>index.html looks something like this:<br><img alt="refactored code" src='polaroids/images/index.png'><br>Here is the link to my github repo:<a id="sizzle" href="https://github.com/namratahonnavar/jquery_is_not_magic">Jquery is not magic.</a><br>I also came across this site when I was doing my research about jquery<br><a id="sizzle" href="http://youmightnotneedjquery.com/">You-might-not-need-jquery</a> :), its pretty legit!!!</strong></p>

</article>

<article class="article">
  
<h1><u>Using Bcrypt for strong password encryption</u></h1>
	<time><span class='month'>May</span> <span class='day'>01</span> <span class='year'>2014</span></time>
	<p class="transbox"><strong><span class="more"> Bcrypt is a life saver. There is one less thing to worry about when you know your user's password is secure. If you decide to store user's password on your database, then an attacker who steals a copy of your database has a giant list of emails and passwords.Most users will only have one password -- for their email account, for their banking account, and for your application. A simple hack could result into a massive identity theft. Bcrypt sounds like one awesome solution against these kind of cyber attacks.<br>A little background on how bcrypt() works:<br>bcrypt() is a hashing algorithm designed by Niels Provos and David Mazi√®res of the OpenBSD Project.<br> Bcrypt has salts built into the generated hashes to prevent  table attacks. It is a bit complicated how salt works.The bcrypt utility itself does not appear to maintain a list of salts. Rather, salts are generated randomly and appended to the output of the function so that they are remembered later on. Put another way, the "hash" generated by bcrypt is not just the hash. Rather, it is the hash and the salt concatenated.<br>Below is an example of how I used bcrypt in one of my projects. <br>Important thing to note is bcrypt is a ruby gem that you will have to include in your gemfile. And add the following code to your user model. It is as easy as that and you are good to go!!<br><img alt="bcrypt code" src='polaroids/images/bcrypt.png'> <br> </strong></p>

</article>

<article class="article">
  
<h1><u>Sorting algorithm</u></h1>
	<time><span class='month'>April</span> <span class='day'>10</span> <span class='year'>2014</span></time>
	<p class="transbox"><strong><span class="more">One of the most important questions that most interviewers ask during a technical interview is sorting and Big-O notation. I totally agree why it is important to understand data stucture and Big-O for perfomrance.<br> I did some research and found this:<br>Big O, *efficient* sorting algorithms like quick sort and merge sort are O(n lg n) when properly implemented.<br>Bubble sort is O(n) at best and O(n^2) at worst (and usually O(n^2)).<br> Quick sort is surprisingly inefficient (O(n^2)) if the list is already reasonably well sorted, which is why it usually starts with a shuffle step.<br>I am visual person and nothing make sense unless I see it. Inorder to wrap my head around these sorting algorithms, I summarized some common algorithms below:<br><br>1.Bubble Sort:<br>a) Look at the first two items in the list.<br>b) If the first item is greater, then swap the items.<br> c) Now compare the second and third items in the same way.<br>d) Continue doing this until you get to the end of the list - 1.<br>e) Repeat the whole process n times (where n is the length of your list).<br><img id="giffbub" alt="bubble sort" src='polaroids/images/bub.gif'><br>Corresponding ruby code looks like this:<br><img alt="ruby code for bubb sort" src="polaroids/images/bubble.png"><br><br>2.Selection sort:<br>a) Take an item in the list and walk up the array checking each element.<br>b) If the item is larger, leave it. If it is smaller, walk back down shifting all larger elements up until it becomes the larger element.<br> You are basically iterating through the list and inserting each item into its correct place.<br><img id="giffselect" alt="select sort" src='polaroids/images/selec.gif'><br>Corresponding ruby code looks like this:<br><img alt="ruby code for select sort" src="polaroids/images/selection.png"><br><br>3. Merge sort:<br>a) Divide the unordered list in half recursively until we have sublists containing 1 element each.<br> b) Repeatedly merge the sublists back together again.<br><img id="giffmerge" alt="merge sort" src='polaroids/images/merge.gif'><br>Corresponding ruby code looks like this:<br><img alt="ruby code for merge sort" src="polaroids/images/mergesort.png"><br><br>4. Quick Sort<br>a) Select an element close to the middle (called the pivot element)<br> b) Put all elements that are less than or equal to that element to the left.<br>c) Put all elements which are greater to its right.<br>d) Recursively call this method on the sublists.<br><img id="giffquick" alt="merge sort" src='polaroids/images/quick.gif'><br>Corresponding ruby code looks like this:<br><img alt="ruby code for quick sort" src="polaroids/images/quicksort.png"><br></strong></p>

</article>

<%= render 'shared/aside' %>

<%= render 'shared/footer' %>